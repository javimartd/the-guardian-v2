
class Constants {
    static final String MAIN_BRANCH = 'main'
    static final String DEVELOP_BRANCH = 'develop'

    static final String INTERNAL_TRACK = 'internal'
    static final String RELEASE_TRACK = 'release'
}

pipeline {

    agent any // any available agent

    parameters {
        choice(
            name: 'CHOICE_ENVIRONMENT',
            choices:["Prod", "Mock"],
            description: 'Which environment to deploy in?'
        )
        choice(
            name: 'CHOICE_BUILD_TYPE',
            choices:["Debug", "Release"],
            description: 'Which build type?'
        )
        booleanParam(
            name: 'GOOGLE_PLAY',
            defaultValue: false,
            description: 'Deploy on Google Play'
        )
        text(
            name: 'TEXT_RELEASE_NOTES',
            defaultValue: 'Release notes:\n',
            description: 'Add release notes'
        )
    }

    environment {
        ANDROID_APP = "The Guardian App"
        TO_LIST = """
            javier.mart7@gmail.com,
        """
    }

    stages {

        stage('Starting...') {
            steps {
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                echo "Build number: ${env.BUILD_NUMBER}"
                echo "Build tag: ${env.BUILD_TAG}"
                echo "Build url: ${env.BUILD_URL}"
                echo "Workspace: ${env.WORKSPACE}"
                echo "Job name: ${env.JOB_NAME}"
            }
        }

        stage("Configuration") {
            steps {
                echo "Project: ${ANDROID_APP}"
                echo "Environment: ${params.CHOICE_ENVIRONMENT}"
                echo "Build Type: ${params.CHOICE_BUILD_TYPE}"
                echo "Deploy on Google Play: ${params.GOOGLE_PLAY}"
                echo "Release notes: ${params.TEXT_RELEASE_NOTES}"
            }
        }

        /* stage('Clean') {
            sh "./gradlew clean"
        } */

        stage("Build") {
            steps {
                echo "Building..."
                sh "./gradlew assemble${params.CHOICE_ENVIRONMENT}Debug"
            }
        }

        stage('Unit tests') {
            steps {
                echo 'Testing...'
                sh "./gradlew test${params.CHOICE_ENVIRONMENT}DebugUnitTest"
            }
        }

        stage('Firebase Distribution') {
            steps {
                echo 'Deploying...'
                script {
                    def artifactPath = "app/build/outputs/apk/${params.CHOICE_ENVIRONMENT}/debug/"
                    def action = "appDistributionUpload${params.CHOICE_ENVIRONMENT}Debug"
                    def releaseNotes = "--releaseNotes='${params.TEXT_RELEASE_NOTES}'"
                    def groups = "--groups=testers"
                    def gradleCommand = "./gradlew ${action} ${releaseNotes} ${groups}"
                    echo "Executing: ${gradleCommand}"
                    sh gradleCommand
                    //sh "./gradlew appDistributionUpload${params.CHOICE_ENVIRONMENT}Debug --releaseNotes='${params.TEXT_RELEASE_NOTES}' --groups=testers"
                    //sh "./gradlew assemble${params.CHOICE_ENVIRONMENT}Debug appDistributionUpload${params.CHOICE_ENVIRONMENT}Debug --releaseNotes='${params.TEXT_RELEASE_NOTES}' --groups=testers"
                }
            }
        }

        stage("Completed") {
            steps {
                echo "Job Complete!"
            }
        }
    }

    post {
        success {
            echo 'The current Pipeline’s or stage’s run has a "success" status'
            sendEmail(
                subject = "SUCCESS CI: Project name -> ${env.JOB_NAME}",
                body = """
                <b>Your build is successful</b>
                <br>Project: ${env.JOB_NAME}
                <br>Build Number: ${env.BUILD_NUMBER}
                <br> URL de build: ${env.BUILD_URL}
                """
            )
        }
        unsuccessful {
            echo 'The current Pipeline’s or stage’s run has not a "success" status'
            sendEmail(
                subject = "FAILED CI: Project name -> ${env.JOB_NAME}",
                body = """
                <b>Your build is failing</b>
                <br>Project: ${env.JOB_NAME}
                <br>Build Number: ${env.BUILD_NUMBER}
                <br> URL de build: ${env.BUILD_URL}
                """
            )
        }
    }
}

def sendEmail(
    String subject,
    String body
) {
    mail(
        subject: "${subject}",
        body: "${body}",
        to: TO_LIST,
        cc: '',
        bcc: '',
        charset: 'UTF-8',
        mimeType: 'text/html',
        replyTo: ''
    )
}