plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

static def headCommitCount() {
    def cmd = "git rev-list HEAD --count"
    return cmd.execute().text.toInteger()
}

static def headCommitSha() {
    def sha = "git rev-parse HEAD --short"
    return sha.execute().text.trim().take(8)
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = headCommitCount()

String getApiKey() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties['THE_GUARDIAN_API_KEY']
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.javimartd.theguardian.v2"
        minSdk 23
        targetSdk 33
        versionCode versionMajor * 1000 +
                versionMinor * 100 +
                versionPatch * 10  +
                versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${headCommitSha()}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "THE_GUARDIAN_API_KEY", getApiKey()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        create("release") {
            try {
                /*storeFile = file(project.property("THE_GUARDIAN_STORE_FILE"))
                storePassword = project.property("THE_GUARDIAN_STORE_PASSWORD")
                keyAlias = project.property("THE_GUARDIAN_APP_KEY_ALIAS")
                keyPassword = project.property("THE_GUARDIAN_APP_KEY_PASSWORD")*/
            } catch (e) {
                throw new InvalidUserDataException("You should define THE_GUARDIAN_STORE and THE_GUARDIAN_APP_KEY in gradle.properties. " + e.getMessage())
            }
        }
    }

    flavorDimensions += "mode"
    productFlavors {
        Mock {
            dimension = "mode"
            applicationIdSuffix = ".mock"
            versionNameSuffix = "-mock"
        }
        Full {
            dimension = "mode"
            applicationIdSuffix = ".full"
            versionNameSuffix = "-full"
        }
    }

    /*sourceSets {
        Mock {
            java { srcDirs 'src/mock/java' }
        }
        Full {
            java { srcDirs 'src/full/java' }
        }
    }*/

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.getByName("release")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
        dependencies {

            // activity
            implementation libs.activity.ktx

            // android kotlin extensions
            implementation libs.core.ktx

            // jetpack compose
            implementation libs.compose.ui
            implementation libs.compose.material
            implementation libs.compose.ui.tooling.preview
            implementation libs.activity.compose
            debugImplementation libs.compose.ui.tooling

            // swipe refresh layout
            implementation libs.accompanist

            // navigation
            implementation libs.navigation

            // retrofit
            implementation libs.retrofit2
            implementation libs.converter.gson

            // okhttp
            implementation libs.okhttp3
            implementation libs.logging.interceptor

            // coroutines
            implementation libs.coroutines

            //lifecycle
            implementation libs.lifecycle.runtime.ktx
            implementation libs.lifecycle.viewmodel.ktx
            implementation libs.lifecycle.extensions

            // hilt
            implementation libs.hilt.android
            kapt libs.hilt.compiler
            implementation libs.hilt.navigation.compose

            // room
            implementation libs.room.ktx
            implementation libs.room.runtime
            kapt libs.room.compiler

            // images
            implementation libs.coil

            // android tests
            androidTestImplementation libs.junit
            androidTestImplementation libs.compose.ui.test.junit4
            debugImplementation libs.compose.ui.test.manifest
            androidTestImplementation libs.turbine
            androidTestImplementation libs.coroutines.test
            androidTestImplementation libs.runner
            androidTestImplementation libs.core.testing

            // unit tests
            testImplementation libs.coroutines.test
            testImplementation libs.mockito
            testImplementation libs.core.testing
            testImplementation libs.mockwebserver
            testImplementation libs.truth
            testImplementation libs.mockk
            testImplementation libs.tngtech.archunit
        }
    }
    namespace 'com.javimartd.theguardian.v2'
}

