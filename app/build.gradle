plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

static def headCommitCount() {
    def cmd = "git rev-list HEAD --count"
    return cmd.execute().text.toInteger()
}

static def headCommitSha() {
    def sha = "git rev-parse HEAD --short"
    return sha.execute().text.trim().take(8)
}


def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = headCommitCount()

String getApiKey() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties['THE_GUARDIAN_API_KEY']
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.javimartd.theguardian.v2"
        minSdk 23
        targetSdk 33
        versionCode versionMajor * 1000 +
                versionMinor * 100 +
                versionPatch * 10  +
                versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${headCommitSha()}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "THE_GUARDIAN_API_KEY", getApiKey()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        create("release") {
            try {
                /*storeFile = file(project.property("THE_GUARDIAN_STORE_FILE"))
                storePassword = project.property("THE_GUARDIAN_STORE_PASSWORD")
                keyAlias = project.property("THE_GUARDIAN_APP_KEY_ALIAS")
                keyPassword = project.property("THE_GUARDIAN_APP_KEY_PASSWORD")*/
            } catch (e) {
                throw new InvalidUserDataException("You should define THE_GUARDIAN_STORE and THE_GUARDIAN_APP_KEY in gradle.properties. " + e.getMessage())
            }
        }
    }

    flavorDimensions += "mode"
    productFlavors {
        Mock {
            dimension = "mode"
            applicationIdSuffix = ".mock"
            versionNameSuffix = "-mock"
        }
        Full {
            dimension = "mode"
            applicationIdSuffix = ".full"
            versionNameSuffix = "-full"
        }
    }

    /*sourceSets {
        Mock {
            java { srcDirs 'src/mock/java' }
        }
        Full {
            java { srcDirs 'src/full/java' }
        }
    }*/

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.getByName("release")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    debugImplementation "androidx.compose.ui:ui-tooling:1.2.1"

    // Swipe refresh layout
    implementation 'com.google.accompanist:accompanist-swiperefresh:0.23.1'

    // navigation
    implementation 'androidx.navigation:navigation-compose:2.5.3'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // okhttp
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    //lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // hilt
    implementation 'com.google.dagger:hilt-android:2.44.2'
    kapt 'com.google.dagger:hilt-compiler:2.42'
    implementation 'androidx.activity:activity-ktx:1.6.1'

    // room
    implementation "androidx.room:room-ktx:2.5.0"
    implementation "androidx.room:room-runtime:2.5.0"
    kapt "androidx.room:room-compiler:2.5.0"

    // images
    implementation 'io.coil-kt:coil-compose:2.2.2'

    // testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    //androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.1'
    //debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.1'
    androidTestImplementation 'app.cash.turbine:turbine:0.12.1'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    testImplementation 'org.mockito:mockito-core:5.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.2'
    testImplementation "com.google.truth:truth:1.1.3"
}